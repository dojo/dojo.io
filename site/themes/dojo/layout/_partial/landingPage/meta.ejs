<section class="intersection-observers uk-section">
	<div class="foreground">
		<div class="scales">
			<div class="scale">
				<%	var height = 670; %>
				<%	var tickOffset = 12; %>
				<%	for (var i = 0; i < height / tickOffset; i++) { %>
				<%		if ((i - 6 ) % 10 === 0) { %>
							<div class="tick large"></div>
				<%		} else if ((i - 1) % 5 === 0) { %>
							<div class="tick medium"></div>
				<%		} else { %>
							<div class="tick small"></div>
				<%		} %>
				<% } %>
			</div>
			<div class="scale right">
				<%	var height = 670; %>
				<%	var tickOffset = 12; %>
				<%	for (var i = 0; i < height / tickOffset; i++) { %>
				<%		if ((i - 6 ) % 10 === 0) { %>
							<div class="tick large"></div>
				<%		} else if ((i - 1) % 5 === 0) { %>
							<div class="tick medium"></div>
				<%		} else { %>
							<div class="tick small"></div>
				<%		} %>
				<% } %>
			</div>
		</div>
		<div class="content">
			<h2>
				<div class="reticle"></div>
				Hello Meta!
			</h2>
			<p>
				widget-coreâ€™s meta mechanism provides reactive abstractions on cutting edge dom proposals like the web animation api and intersection observers in addition to allowing for abstractions on other higher level concepts like dragging.  This allows you to focus on writing familiar, reactive code and not on complications with the dom.
			</p>
			<a href="/tutorials/comingsoon.html">
				See the Tutorial
			</a>
		</div>
	</div>
	<div class="background">
		<div class="square"></div>
		<div class="square"></div>
		<div class="square"></div>
		<div class="square"></div>
		<div class="square"></div>
	</div>
</section>
<script>
	(function () {
		var section = document.querySelector('.intersection-observers');
		var foreground = section.querySelector('.foreground');
		var background = section.querySelector('.background');
		var reticle = section.querySelector('.reticle');
		var squares = section.querySelectorAll('.square');

		var reactivateTime = null;
		window.addEventListener('scroll', function (e) {
			var boundingRect = section.getBoundingClientRect();
			var heightInViewport = window.innerHeight - boundingRect.top;
			var isShowing = heightInViewport > 0 && boundingRect.bottom > 0;
			if (!isShowing) {
				return;
			}
			background.style.top = 'calc(100% - ' + heightInViewport + 'px)';

			var reticleDims = reticle.getBoundingClientRect();
			var reticleTop = reticleDims.top;
			var reticleHeight = reticleDims.height;
			var reticleMiddle = reticleTop + reticleHeight / 2;

			for (var i = 0; i < squares.length; i++) {
				var square = squares[i];
				var squareDims = square.getBoundingClientRect();
				if (squareDims.top > reticleMiddle) {
					square.style.transform = square.style['-ms-transform'] = 'rotateY(0deg)';
				}
				else if (squareDims.top + squareDims.height < reticleMiddle) {
					square.style.transform = square.style['-ms-transform'] = 'rotateY(180deg)';
				} else {
					var percent = ( reticleMiddle - squareDims.top) / squareDims.height;
					square.style.transform = square.style['-ms-transform'] = 'rotateY(' + 180 * percent + 'deg)';
				}
			};

		});
	})();
</script>
